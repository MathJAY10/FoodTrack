generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  accounts  Account[]
  sessions  Session[]
  foodLogs  FoodLog[]
  chatLogs  ChatLog[]
}

model FoodItem {
  id             String         @id @default(uuid())
  name           String
  imageUrl       String?
  recognizedByAI Boolean        @default(false)
  source         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  nutritionInfo  NutritionInfo?
  recipe         Recipe?
  foodLogs       FoodLog[]
}

model NutritionInfo {
  id          String   @id @default(uuid())
  foodItemId  String   @unique
  calories    Int
  protein     Float
  carbs       Float
  fat         Float
  fiber       Float?
  sugar       Float?
  sodium      Float?
  vitamins    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
}

model Recipe {
  id          String   @id @default(uuid())
  foodItemId  String   @unique
  ingredients Json
  instructions Json
  sourceUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  foodItem    FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
}

model FoodLog {
  id        String   @id @default(uuid())
  userId    String
  foodItemId String
  quantity  Float
  mealType  String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodItem  FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
}

model ChatLog {
  id        String   @id @default(uuid())
  userId    String
  query     String
  response  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
